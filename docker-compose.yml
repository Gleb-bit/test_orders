networks:
  orders-network:

services:
  backend:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    container_name: orders_backend
    depends_on:
      - db
      - consumer
    env_file:
      - .env
    networks:
      - orders-network
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/backend

  db:
    container_name: orders_db
    image: postgres:latest
    networks:
      - orders-network
    env_file:
      - .env
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    container_name: orders_redis
    image: redis:latest
    networks:
      - orders-network
    restart: always

  zookeeper:
    container_name: orders_zookeeper
    image: confluentinc/cp-zookeeper:latest
    env_file:
      - .env
    networks:
      - orders-network

  kafka:
    container_name: orders_kafka
    depends_on:
      - zookeeper
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server=localhost:9092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 5
    image: confluentinc/cp-kafka:latest
    ports:
      - "${K_PORT}:${K_PORT}"
    networks:
      - orders-network

  consumer:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: python start_consumer.py
    container_name: orders_consumer
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - orders-network
    volumes:
      - ./backend:/backend

  celery:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: celery -A config.celery worker --loglevel=info
    container_name: orders_celery
    depends_on:
      - consumer
      - redis
    env_file:
      - .env
    networks:
      - orders-network
    volumes:
      - ./backend:/backend

volumes:
  pgdata:
